#!/usr/bin/env python

import argparse

parser = argparse.ArgumentParser(description='LArCV ProcessDriver Run Script.')

parser.add_argument('-o','--output', 
                    type=str, dest='outfile',
                    help='string, output file name (can include a path), override config file')

parser.add_argument('-i','--inlist', 
                    type=str, dest='infiles',nargs='+',
                    help='string, expect a text file w/ space or line separated list of input files, override config file')

parser.add_argument('-s','--start',  
                    type=int, dest='start',
                    help='integer, starting index of IOManager process, default 0',default=0)

parser.add_argument('-n','--numevents',  
                    type=int, dest='nevents',
                    help='integer, # events to process, default 0 meaning all events',default=0)

parser.add_argument('-c','--config',  
                    type=str, dest='cfg',
                    help='config file',required=True)

args = parser.parse_args()

import ROOT, sys, os
from ROOT import std
from larcv import larcv

proc = larcv.ProcessDriver('ProcessDriver')
proc.configure(args.cfg)

if args.infiles:
   
   files = args.infiles
   
   if len(args.infiles) == 1:      
      file_=args.infiles[0]

      if os.path.exists(file_):
         with open(file_,'r') as f: 
            files=f.read().split("\n")
         
         if files[-1]=='': files[:-1]

   flist=ROOT.std.vector('std::string')()
   for file_ in files:
      flist.push_back(file_)

   proc.override_input_file(flist)

if args.outfile:
   proc.override_output_file(args.outfile)

proc.initialize()

proc.batch_process(args.start,args.nevents)

proc.finalize()
